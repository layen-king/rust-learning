/// ## 整数反转

/// ### 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。

/// ### 如果反转后整数超过 32 位的有符号整数的范围 \[−231,  231 − 1\] ，就返回 0。

/// ### 假设环境不允许存储 64 位整数（有符号或无符号）。
/// ###

/// ### 示例 1：

/// ### 输入：x = 123
/// ### 输出：321
/// ### 示例 2：

/// ### 输入：x = -123
/// ### 输出：-321
/// ### 示例 3：

/// ### 输入：x = 120
/// ### 输出：21
/// ### 示例 4：

/// ### 输入：x = 0
/// ### 输出：0
#[allow(dead_code)]
fn reverse(x: i32) -> i32 {
    let mut res = 0;
    let mut num = x;
    while num != 0 {
        res = res * 10 + num % 10;
        if res > i32::MAX - 1 || res < i32::MIN {
            return 0 as i32;
        }
        num = num / 10;
    }
    res
}

#[test]
fn test_reverse() {
    let result = reverse(123456);
    assert_eq!(result, 654321)
}
