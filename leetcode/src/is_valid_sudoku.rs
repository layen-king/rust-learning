/// ## 有效的数独

/// ### 中等

/// ### 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

/// ### 数字 1-9 在每一行只能出现一次。
/// ### 数字 1-9 在每一列只能出现一次。
/// ### 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
/// ### 数独部分空格内已填入了数字，空白格用 '.' 表示。

/// ### 注意：

/// ### 一个有效的数独（部分已被填充）不一定是可解的。
/// ### 只需要根据以上规则，验证已经填入的数字是否有效即可。
/// ###

/// ### 示例 1：

/// ### 输入：board =
/// ### [['5','3','.','.','7','.','.','.','.']
/// ### ,['6','.','.','1','9','5','.','.','.']
/// ### ,['.','9','8','.','.','.','.','6','.']
/// ### ,['8','.','.','.','6','.','.','.','3']
/// ### ,['4','.','.','8','.','3','.','.','1']
/// ### ,['7','.','.','.','2','.','.','.','6']
/// ### ,['.','6','.','.','.','.','2','8','.']
/// ### ,['.','.','.','4','1','9','.','.','5']
/// ### ,['.','.','.','.','8','.','.','7','9']]
/// ### 输出：true
/// ### 示例 2：

/// ### 输入：board =
/// ### [['8','3','.','.','7','.','.','.','.']
/// ### ,['6','.','.','1','9','5','.','.','.']
/// ### ,['.','9','8','.','.','.','.','6','.']
/// ### ,['8','.','.','.','6','.','.','.','3']
/// ### ,['4','.','.','8','.','3','.','.','1']
/// ### ,['7','.','.','.','2','.','.','.','6']
/// ### ,['.','6','.','.','.','.','2','8','.']
/// ### ,['.','.','.','4','1','9','.','.','5']
/// ### ,['.','.','.','.','8','.','.','7','9']]
/// ### 输出：false
/// ### 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
/// ###

/// ### 提示：

/// ### board.length == 9
/// ### board[i].length == 9
/// ### board[i][j] 是一位数字或者 '.'
/// ### 通过次数178,402提交次数283,071

/// ### 来源：力扣（LeetCode）
/// ### 链接：https://leetcode-cn.com/problems/valid-sudoku
pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
    let mut rows: Vec<Vec<i32>> = vec![0; 9].iter().map(|_| vec![0; 9]).collect();
    let mut columns: Vec<Vec<i32>> = vec![0; 9].iter().map(|_| vec![0; 9]).collect();
    let mut subboxes: Vec<Vec<Vec<i32>>> = vec![0; 3]
        .iter()
        .map(|_| vec![0; 3].iter().map(|_| vec![0; 9]).collect())
        .collect();
    for i in 0..9 {
        let i = i as usize;
        for j in 0..9 {
            let j = j as usize;
            let c = board[i][j];
            if c != '.' {
                let index = (c.to_digit(10).unwrap_or(1) - 1) as usize;
                if rows[i][index] > 0 || columns[j][index] > 0 || subboxes[i / 3][j / 3][index] > 0
                {
                    return false;
                }
                rows[i][index] += 1;
                columns[j][index] += 1;
                subboxes[i / 3][j / 3][index] += 1;
            }
        }
    }
    true
}

#[test]
fn test_is_valid_sudoku() {
    let v1 = vec!['8', '3', '.', '.', '7', '.', '.', '.', '.'];
    let v2 = vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'];
    let v3 = vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'];
    let v4 = vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'];
    let v5 = vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'];
    let v6 = vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'];
    let v7 = vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'];
    let v8 = vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'];
    let v9 = vec!['.', '.', '.', '.', '8', '.', '.', '7', '9'];
    let result = is_valid_sudoku(vec![v1, v2, v3, v4, v5, v6, v7, v8, v9]);
    assert_eq!(result, false);
}
